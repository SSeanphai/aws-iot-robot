{"ast":null,"code":"import * as AWS from 'aws-sdk';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../auth.service\";\nimport * as i2 from \"@angular/common/http\";\nimport * as i3 from \"@angular/forms\";\nimport * as i4 from \"@angular/common\";\n\nfunction ProvisionComponent_option_20_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 16);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const template_r1 = ctx.$implicit;\n    i0.ɵɵproperty(\"ngValue\", template_r1.templateName);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(template_r1.templateName);\n  }\n}\n\nexport let ProvisionComponent = /*#__PURE__*/(() => {\n  class ProvisionComponent {\n    constructor(authService, http) {\n      this.authService = authService;\n      this.http = http;\n      this.provStage = 1;\n      this.timeLeft = 300;\n      this.provRequestStatus = \"Request Certificates\";\n      this.provDeployStatus = \"Deploy Certificates to Device\";\n      this.configDeployStatus = \"Create Config.yaml\";\n      this.fullDeployStatus = \"Install and Deploy GGv2\";\n      this.provUrl = '/cgi-bin/saveprovisioningcerts.py';\n      this.configUrl = '/cgi-bin/createconfigyaml.py';\n      this.provisionUrl = '/cgi-bin/provisionggv2.py';\n    }\n\n    ngOnInit() {\n      this.setEndpoint();\n      this.getCredentialEndpoint();\n      this.setAccountNumber();\n      this.getProvisioningTemplates();\n    }\n\n    setEndpoint() {\n      var self = this;\n      let params = {\n        endpointType: 'iot:Data-ATS'\n      };\n      new AWS.Iot().describeEndpoint(params, function (err, data) {\n        if (err) {\n          console.log(\"Error getting IoT Endpioint address\");\n        } else {\n          self.endpointAddress = data.endpointAddress;\n          self.endpointPrefix = self.endpointAddress.split('-')[0];\n        }\n      });\n    }\n\n    setAccountNumber() {\n      var self = this;\n      let sts = new AWS.STS();\n      sts.getCallerIdentity({}, function (err, data) {\n        if (err) {\n          console.log(\"Error\", err);\n        } else {\n          //console.log(JSON.stringify(data.Account));\n          self.accountNumber = data.Account;\n        }\n      });\n    }\n\n    getCredentialEndpoint() {\n      var self = this;\n      let params = {\n        endpointType: 'iot:CredentialProvider'\n      };\n      new AWS.Iot().describeEndpoint(params, function (err, data) {\n        if (err) {\n          console.log(\"Error getting IoT Endpioint address\");\n        } else {\n          self.credentialEp = data.endpointAddress;\n        }\n      });\n    }\n\n    getProvisioningTemplates() {\n      var self = this;\n      let params = {\n        maxResults: 5\n      };\n      new AWS.Iot().listProvisioningTemplates(params, function (err, data) {\n        if (err) {\n          console.log(err, err.stack); // an error occurred\n        } else {\n          self.templates = data.templates;\n          console.log(data); // successful response\n        }\n      });\n    }\n\n    getProvisioningCerts() {\n      var self = this; //let params = { templateName: awsConfig.iotTemplateName };\n\n      let params = {\n        templateName: this.templateName\n      };\n      let claim = new AWS.Iot().createProvisioningClaim(params, function (err, data) {\n        if (err) {\n          console.log(\"Error creating claim:\", err);\n        } else {\n          console.log(\"Created claim successfully:\", data);\n          self.certPem = data['certificatePem'];\n          self.pubKey = data['keyPair']['PublicKey'];\n          self.prvKey = data['keyPair']['PrivateKey'];\n          self.provStage = 2;\n          self.provRequestStatus = \"Done!\";\n          self.startTimer();\n        }\n      });\n    }\n\n    deployProvisioningCerts() {\n      var self = this;\n      console.log(\"Uploading provisioning certs\");\n      const body = {\n        certPem: this.certPem,\n        prvKey: this.prvKey,\n        pubKey: this.pubKey\n      };\n      this.http.post(this.provUrl, body, {\n        responseType: 'text'\n      }).subscribe(data => {\n        console.log(\"Sent provisioning certs,\", data);\n        self.provStage = 3;\n        self.provDeployStatus = \"Done!\";\n      });\n    }\n\n    createConfigYaml() {\n      var self = this;\n      console.log(\"Creating GGv2 Config.yaml\");\n      const body = {\n        template: this.templateName,\n        endpoint: this.endpointAddress,\n        credentialep: this.credentialEp,\n        devicename: this.deviceName\n      };\n      this.http.post(this.configUrl, body, {\n        responseType: 'text'\n      }).subscribe(data => {\n        console.log(\"Created config.yaml,\", data);\n        self.provStage = 4;\n        self.configDeployStatus = \"Done!\";\n      });\n    }\n\n    provision() {\n      var self = this;\n      console.log(\"Installing and provisioning\");\n      const body = {};\n      this.http.post(this.provisionUrl, body, {\n        responseType: 'text'\n      }).subscribe(data => {\n        console.log(\"Provisioning,\", data);\n        self.provStage = 5;\n        self.fullDeployStatus = \"Done!\";\n        window.clearInterval(self.interval);\n      });\n    }\n\n    onSelectTemplate(template) {\n      this.templateName = template;\n      console.log(\"Selected template:\", template);\n    }\n\n    startTimer() {\n      // Timer to ensure process is completed within 5 minutes, which is the validity period for the provisioning certs\n      var self = this;\n      this.interval = setInterval(() => {\n        if (this.timeLeft > 0) {\n          this.timeLeft--;\n        } else {\n          this.provStage = 1;\n          this.provRequestStatus = \"Request\";\n          this.timeLeft = 300;\n          clearInterval(self.interval);\n        }\n      }, 1000);\n    }\n\n  }\n\n  ProvisionComponent.ɵfac = function ProvisionComponent_Factory(t) {\n    return new (t || ProvisionComponent)(i0.ɵɵdirectiveInject(i1.AuthService), i0.ɵɵdirectiveInject(i2.HttpClient));\n  };\n\n  ProvisionComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: ProvisionComponent,\n    selectors: [[\"app-provision\"]],\n    decls: 65,\n    vars: 12,\n    consts: [[1, \"row\", \"m-5\", \"justify-content-center\"], [1, \"col-lg-6\", \"col-sm-12\"], [1, \"alert\", \"alert-warning\", \"alert-heading\"], [1, \"text-center\"], [1, \"card\", \"shadow\", \"mb-4\", \"d-flex\", \"align-items-stretch\"], [1, \"card-header\", \"text-white\", \"bg-secondary\"], [1, \"card-body\"], [1, \"form-group\"], [\"for\", \"deviceName\"], [\"type\", \"text\", \"id\", \"deviceName\", \"placeholder\", \"Enter a name for the Greengrass v2 Core being provisioned\", 1, \"form-control\", 3, \"ngModel\", \"ngModelChange\"], [\"for\", \"templateName\"], [1, \"form-control\", 3, \"ngModel\", \"ngModelChange\"], [3, \"ngValue\", 4, \"ngFor\", \"ngForOf\"], [1, \"card-text\"], [1, \"mt-2\", \"btn\", \"btn-success\", 3, \"disabled\", \"click\"], [1, \"btn\", \"btn-success\", 3, \"disabled\", \"click\"], [3, \"ngValue\"]],\n    template: function ProvisionComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"div\", 2)(3, \"h4\", 3);\n        i0.ɵɵtext(4);\n        i0.ɵɵelementEnd()()()();\n        i0.ɵɵelementStart(5, \"div\", 0)(6, \"div\", 1)(7, \"div\", 4)(8, \"div\", 5)(9, \"h4\");\n        i0.ɵɵtext(10, \"1. Enter Configuration Information\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(11, \"div\", 6)(12, \"div\", 7)(13, \"label\", 8);\n        i0.ɵɵtext(14, \"Device Name\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(15, \"input\", 9);\n        i0.ɵɵlistener(\"ngModelChange\", function ProvisionComponent_Template_input_ngModelChange_15_listener($event) {\n          return ctx.deviceName = $event;\n        });\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(16, \"div\", 7)(17, \"label\", 10);\n        i0.ɵɵtext(18, \"Fleet Template Name\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(19, \"select\", 11);\n        i0.ɵɵlistener(\"ngModelChange\", function ProvisionComponent_Template_select_ngModelChange_19_listener($event) {\n          return ctx.templateName = $event;\n        })(\"ngModelChange\", function ProvisionComponent_Template_select_ngModelChange_19_listener() {\n          return ctx.onSelectTemplate(ctx.templateName);\n        });\n        i0.ɵɵtemplate(20, ProvisionComponent_option_20_Template, 2, 2, \"option\", 12);\n        i0.ɵɵelementEnd()()()()()();\n        i0.ɵɵelementStart(21, \"div\", 0)(22, \"div\", 1)(23, \"div\", 4)(24, \"div\", 5)(25, \"h4\");\n        i0.ɵɵtext(26, \"2. Request Provisioning Certificates\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(27, \"div\", 6)(28, \"p\", 13);\n        i0.ɵɵtext(29, \"The claim certificates are valid for 5 minutes only - the timer will start once you click on the 'Request' button below. Complete all stages within this time or you will need to start again.\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(30, \"button\", 14);\n        i0.ɵɵlistener(\"click\", function ProvisionComponent_Template_button_click_30_listener() {\n          return ctx.getProvisioningCerts();\n        });\n        i0.ɵɵtext(31);\n        i0.ɵɵelementEnd()()()()();\n        i0.ɵɵelementStart(32, \"div\", 0)(33, \"div\", 1)(34, \"div\", 4)(35, \"div\", 5)(36, \"h4\");\n        i0.ɵɵtext(37, \"3. Deploy Provisioning Certificates\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(38, \"div\", 6)(39, \"p\", 13);\n        i0.ɵɵtext(40, \"Once the claim certificates have been requested, deploy them to your device by clicking on the button below.\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(41, \"button\", 15);\n        i0.ɵɵlistener(\"click\", function ProvisionComponent_Template_button_click_41_listener() {\n          return ctx.deployProvisioningCerts();\n        });\n        i0.ɵɵtext(42);\n        i0.ɵɵelementEnd()()()();\n        i0.ɵɵelementStart(43, \"div\", 0)(44, \"div\", 1)(45, \"div\", 4)(46, \"div\", 5)(47, \"h4\");\n        i0.ɵɵtext(48, \"4. Create Provisioning Config\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(49, \"div\", 6)(50, \"p\", 13);\n        i0.ɵɵtext(51, \"The stage uses the certificates and account information to create a config.yaml file on the target that is used for the Greengrass provisioning via the Greengrass v2 Fleet Provisioning Plug-in.\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(52, \"button\", 14);\n        i0.ɵɵlistener(\"click\", function ProvisionComponent_Template_button_click_52_listener() {\n          return ctx.createConfigYaml();\n        });\n        i0.ɵɵtext(53);\n        i0.ɵɵelementEnd()()()()();\n        i0.ɵɵelementStart(54, \"div\", 0)(55, \"div\", 1)(56, \"div\", 4)(57, \"div\", 5)(58, \"h4\");\n        i0.ɵɵtext(59, \"5. Install and Provision Greengrass\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(60, \"div\", 6)(61, \"p\", 13);\n        i0.ɵɵtext(62, \"The final stage installs Greengrass v2 and provisions to IoT Core.\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(63, \"button\", 14);\n        i0.ɵɵlistener(\"click\", function ProvisionComponent_Template_button_click_63_listener() {\n          return ctx.provision();\n        });\n        i0.ɵɵtext(64);\n        i0.ɵɵelementEnd()()()()()();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(4);\n        i0.ɵɵtextInterpolate1(\"You have \", ctx.timeLeft, \" seconds to complete the provisioning process\");\n        i0.ɵɵadvance(11);\n        i0.ɵɵproperty(\"ngModel\", ctx.deviceName);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"ngModel\", ctx.templateName);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngForOf\", ctx.templates);\n        i0.ɵɵadvance(10);\n        i0.ɵɵproperty(\"disabled\", ctx.provStage > 1);\n        i0.ɵɵadvance(1);\n        i0.ɵɵtextInterpolate(ctx.provRequestStatus);\n        i0.ɵɵadvance(10);\n        i0.ɵɵproperty(\"disabled\", ctx.provStage != 2);\n        i0.ɵɵadvance(1);\n        i0.ɵɵtextInterpolate(ctx.provDeployStatus);\n        i0.ɵɵadvance(10);\n        i0.ɵɵproperty(\"disabled\", ctx.provStage != 3);\n        i0.ɵɵadvance(1);\n        i0.ɵɵtextInterpolate(ctx.configDeployStatus);\n        i0.ɵɵadvance(10);\n        i0.ɵɵproperty(\"disabled\", ctx.provStage != 4);\n        i0.ɵɵadvance(1);\n        i0.ɵɵtextInterpolate(ctx.fullDeployStatus);\n      }\n    },\n    directives: [i3.DefaultValueAccessor, i3.NgControlStatus, i3.NgModel, i3.SelectControlValueAccessor, i4.NgForOf, i3.NgSelectOption, i3.ɵNgSelectMultipleOption],\n    styles: [\"\"]\n  });\n  return ProvisionComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}